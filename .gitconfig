[init]
  templatedir = ~/.git/templates

[color]
  ui = auto
  status = auto
  diff = auto
  branch = auto
  interactive = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[alias]
  #init a repository; add 'GIT-START' tag with just .gitignore (usually an empty repo)
  #for easy rebasing later from the first actual commit on (i.e. 'git rebase -i GIT-START')
    initr = "!f() { git init && touch .gitignore && git add .gitignore && git commit -m 'Initial commit.' && git tag -a GIT-START -m 'For rebasing from the beginning.' && echo && git log --pretty=fuller --decorate && echo && git status && echo '\nNOTE: Any existing content has not been committed yet!\n' ; }; f"
  #commit initial content after 'initr' in case git tracking was added to a non-empty directory
    initc = "!f() { git add -A && git commit -m 'Initial content.' && echo && git log --cc --stat && echo '\nInitial content has been committed.\n' ; }; f"

  #add a tag to the current commit
    addtag = tag -a
  #delete tag locally
    deltag = tag --delete
  #push [new] tags to origin
    pushtags = push origin --tags
  #delete a tag at origin (arg: tag name to delete)
    delremtag = push --delete origin 
  #show all remote tags at origin
    remtags = ls-remote --tags origin
  #list tags by date, from oldest to the most recent
    tbd = "!f() { git for-each-ref --format='%(*creatordate:raw)%(creatordate:raw) %(creatordate:short) %(refname) %(*objectname) %(objectname)' refs/tags | sort -n | awk '{ print $3, $5, $4 }' ; }; f"
  #list tags with their descriptions
    tagdesc = tag -n25
  #show last tag name and annotation
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
  #show last tag diff and details
    ltdf = !git describe --exact-match --abbrev=0 | xargs git show
  #show tags list; NOTE: use 'ft' (git fetch --tags) first to get all tags
    lst = "!f() { git log --no-walk --tags --pretty='%C(cyan)%h%Creset %d %Cblue%s%Creset' --decorate=full ; }; f"
  #find a tag, req: tag name or hash
    fat = "!f() { git --no-pager log --tags --no-walk --no-abbrev --pretty='%h %d %s' --decorate=full | grep --color=auto "$1" ; }; f"
  #show tags detail paginated; ; NOTE: use 'ft' (git fetch --tags) first to get all tags
    tags = "!f() { git log --no-walk --tags ; }; f"

  #ABBR: describe
    desc = describe

  #standard push to origin
    po = push origin
  #force push (e.g. to reset remote to a specific commit after local reset --hard <hash> or amended commit); req <remote> [<lb>:<rb>] as params
    pushard = push -f
  #force push protecting any possible subsequent updates on the remote
    pf = push --force-with-lease

  #ABBR: clone
    cl = clone
  #clone a repository and init its submodules
    cls = clone --recurse-submodules

  #ABBR: cherry-pick
    cpick = cherry-pick

  #ABBR: checkout
    co = checkout
  #EXT (git-whistles/git-stash-and-checkout): stash current changes, checkout new branch, unstash changes for that 1anch
    cos = stash-and-checkout
  #checkout master/main branch; no stash/pop
    master = "!f() { git branch | grep 'master\\|main' | tr -d \\* | xargs git checkout ; };f"
  #checkout master/main branch; with stash & pop
    masters = "!f() { git branch | grep 'master\\|main' | tr -d \\* | xargs git stash-and-checkout ; };f"
  #checkout another branch via visual menu; no stash/pop (requires fzf: https://github.com/junegunn/fzf)
    chbr  = "!f() { git branch | grep -v '\\*' | fzf | xargs git checkout ; }; f"
  #checkout another branch via visual menu; with stash & pop (requires fzf: https://github.com/junegunn/fzf)
    chbrs  = "!f() { git branch | grep -v '\\*' | fzf | xargs git stash-and-checkout ; }; f"
  #check out a single tag ONLY (such as, for deployment)
  #req: <tag> <repository>
    coone = "!f() { git clone -b "$1" --single-branch --depth 1 $2 ; }; f"
  #checkout a tag
    cotg = "!f() { git checkout tags/$1 ; }; f"
  #EXT (my-git-extras/scripts/git-checkout-all): track all available branches from the origin
    ca = checkout-all
  #make an orphan branch (no parents, no history)
    orphan = "!f() { git checkout --orphan $1 && git rm -rf "."; }; f"
  #ABBR: branch
    br = branch
  #show current branch name
    whereami = branch --show-current
  #display branches without pagination
    brs = "!f() { git --no-pager branch ; }; f"
  #display the current branch name (including detached head, orphan)
  #TODO: resolve SHA to branch(es) (as in 'c2b', such as with a detached head)
  #See: http://stackoverflow.com/questions/2706797/finding-what-branch-a-git-commit-came-from
    brr = "!f() { git status -b | head -n1 | cut -d' ' -f3- ; }; f"
  #rename branch
    renbr = branch -m
  #swap branches
    swap =  "!f() { git branch -m $1 ${1}.TMPTMPTMP && git branch -m $2 $1  && git branch -m ${1}.TMPTMPTMP $2 && git checkout $1 ; }; f"
  #substitute branch with another, and archive old with a datetime stamp
    subst = "!f() { DT=`date +%Y-%m-%d_%H%M` && git branch -m $1 ${1}-${DT} && git branch -m $2 $1 ; }; f"
  #add 'done-' label to branch name (rename)
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
  #drop (delete) a branch irrespecive of its merge status (be careful!)
    dropbr = branch -D
  #drop (delete) all but master/main and the current branch (be careful!)
    purgebrs = "!f() { git branch | grep -v 'master' | grep -v 'main' | grep -v '\\*' | xargs git branch -D ; }; f"
  #delete selected branches (requires fzf: https://github.com/junegunn/fzf)
    delbrs = "!f() { git branch | grep -v '\\*' | grep -v 'master' | grep -v 'main' | fzf --multi | xargs git branch --delete --force ; }; f"
  #drop (delete) remote branch; args: repo, branch; e.g. droprembr origin somebranch
    droprembr = "!f() { git push $1 --delete $2; }; f"
  #show local and remote branches a commit (SHA) occurs in
    c2b = branch -a --contains
  #find commits by Author (partial match is ok)
    author = "!f() { git log --all --author=$1; }; f"
  #EXT (my-git-extras/scripts/git-amend-author): amend author of a specific commit SHA (see more comments in the script)
    ama = amend-author
  #change the author and the committer of the *most recent commit* (args: name (use quotes if name contains spaces), email);
  #to change author deeper into the commits, see: http://stackoverflow.com/questions/750172/change-the-author-of-a-commit-in-git
  #or http://stackoverflow.com/a/28845565/134536
    chlastauth = "!f() { git -c user.name=\"$1\" -c user.email=\"$2\" commit --amend --reset-author --no-edit; }; f"

  #check out a remote branch with its name as-is and start tracking it: [remote]/[remotebranchname]
    coasis = checkout --track
  #check out an origin remote branch with its name as-is and start tracking it: [remotebranchname]
    cooasis = "!f() { git checkout --track origin/$1 ; }; f"
  #"Visual CheckOut Remote"; check out a remote branch via visual menu with its name as-is and start tracking it (requires fzf: https://github.com/junegunn/fzf)
    vcor = "!f() { git branch -r | fzf | xargs -J % git checkout --track ; }; f"
  #"CheckOutTrackBranch"; create a new branch, set up its upstream, start tracking it, and check it out;
  #use this also to checkout a remote branch: [localbranchname] [remote]/[remotebranchname]; really same as 'branch' by itself
    cotb = checkout --track -b
  #"CheckOutTrackBranchOrigin", as above, but use 'origin' for the remote, and the remote branch name for the local branch name: [remotebranchname]
    cotbo = "!f() { git checkout --track -b $1 origin/$1 ; }; f"
  #create a new branch and check it out, local only (no upstream);
  #optimal for duplicating a local branch where you don't want to push back to the parent:
  #e.g. [localtargetbranch] [localsourcebranch], or [localtargetbranch] [origin/remotesourcebranch]
    lbr = checkout --no-track -b
  #push branch to 'origin' with the same name as local, and set tracking (usually optimal after duplicating local branch with 'lbr')
    pushtor = "!f() { git push --set-upstream origin $(git symbolic-ref --short HEAD):$(git symbolic-ref --short HEAD) ; }; f"
  #push branch to 'origin' with a different name as local, and set tracking (req [new remote branch name])
    pushtorn = "!f() { git push --set-upstream origin $(git symbolic-ref --short HEAD):$1 ; }; f"
  #set remote upstream for an existing local branch using 'origin' and the same branch name as local (NOTE: remote must also exist for this to work)
    setremor = "!f() { git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD) ; }; f"
  #set remote upstream for an existing local branch using 'origin' and a new branch name (req [new remote branch name])
    setremorn = "!f() { git branch --set-upstream-to=origin/$1 ; }; f"

  #EXT (my-git-extras/scripts/git-publish-branch): publish an existing local branch to remote, and start tracking it (~same as above)
  #usage: git publish-branch [-d] <branch> [repository]
    pub = publish-branch
  #EXT (my-git-extras/scripts/git-publish-branch): unpublish the given branch on remote, and stop tracking it
    unpub = publish-branch -d
  #set remote upstream for an existing local branch (NOTE: may need to fetch first, especially if remote was just added, then e.g. origin/master)
  #e.g. [localbranchname], or [origin/remotebranchname]
    setups = branch --set-upstream-to
  #unset remote upstrem for an existing local branch
    unsetups = branch --unset-upstream

  #EXT (my-git-extras/scripts/git-uncheckout): uncheckout a remote branch (cannot be current) to remove from local
    unco = uncheckout
  #EXT (my-git-extras/scripts/git-uncheckout-interactive): uncheckout remote branches interactively (to choose which ones to remove/keep on local)
    uncoint = uncheckout-interactive
  #ABBR: blame
    bl = blame
  #log "blame"; requires a ref as a param
    lb = log -p -M --follow --stat --
  #display last commit date/committer for each local or tracked remote branch
    llb = "!f(){ git status -sb;git for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)  (%(authorname))'; };f"
  #display the last commit for the given branch (or current if not given)
    llv = branch -lvv

  #ABBR: grep working tree for regexp (no binary file search)
    grep = grep -I
    gg = grep -I
  #case-insensitive grep working tree for regexp (no binary file search)
    ggi = grep -iI
  #grep working tree for regexp from the top level (no binary file search)
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  #grep working tree; display filenames only for matches (no binary file search)
    ggno = grep -I --name-only
  #search log for commit comments with a given string
    findstring = log --pretty=format:'%Cgreen%H %Cblue%s' --name-status --grep
  #locate a file in the codebase (req filename)
    ff = !git ls-files | grep -i
  #find string in code history (not in commit comments)
    grepcode = "!f() { git rev-list --all | xargs git grep $1; }; f"

  ###see more git grep examples: http://stackoverflow.com/a/2929502/134536

  #ABBR: remote
    rem = remote
  #show known remote fetch/push URLs
    remotes = remote -v
  #set (or change) remote fetch/push URLs, e.g. origin git@github.com:USERNAME/repo-name.git
    setrem = remote set-url
  #add/update remote URL (requires remote name and URL, e.g. origin git@github.com:/USERNAME/OTHERREPO.git)
    addrem = add-set-remote
  #remove remote (arg: only the remote name, such as "origin")
    remrem = remote remove
  #set a different 'push' remote from 'pull/fetch' URL (requires [existing] remote name and URL, e.g. origin git@github.com:/USERNAME/OTHERREPO.git)
  #see: http://blog.yuriy.tymch.uk/2012/05/different-git-push-pullfetch-urls.html for more detail
    forkrem = remote set-url --push

  # update a branch (also without checkout): e.g. git update somebranch (on or off 'somebranch')
  # update a branch from upstream remote: git update somebranch upstream
  update = "!fn() { \
    repo=${2:-origin}; \
    if [[ $(git rev-parse --abbrev-ref HEAD) = \"$1\" ]]; \
    then \
        git pull \"${repo}\"; \
    else \
        git fetch \"${repo}\" \"$1\":\"$1\"; \
    fi; \
    }; fn"

  #EXT (my-git-extras/scripts/git-show-remote-branch): show remote(s) for the current branch
    rembr = show-remote-branch
  #show remote tracked branches for the local branches
  #TODO: convert this into a script; detect "no remotes"
    rems = for-each-ref --format='%(color:reverse cyan)%(refname:short)%(color:reset) <- %(color:cyan)%(upstream:short)%(color:reset)' refs/heads
  #show branch heads on the given remote (query remote)
    rembrs = ls-remote --heads
  #show tracked remote branches (known since the most recent fetch)
    trackbrs = branch -r
  #list remote-tracking and local branches
    lab = branch -avv
  #show trackable branches and their statuses on the repo's origin
    rso = remote show origin
  #show this repo's origin URL
    rsop = config --get remote.origin.url
  #show this repo's origin name
    rson = "!f() { basename $(git remote get-url origin) .git ; }; f"
  #update remote refs and display branches that got updated
    ru = remote -v update

  #ABBR: submodule
    sub = submodule
  #update submodules recursively
    subup = submodule update --init --recursive

  #refresh heads/refs from origin
    fo = fetch origin
  #refresh heads/refs from all remotes
    fa = fetch --all
  #fetch all tags (also those that are not directly accessible by the current references)
    ft = fetch --tags
  #fetch everything and prune local branches
    fall = fetch --all --tags --prune


  #ABBR: fetch
    f = fetch

  #ABBR: rev-parse
    rp = rev-parse

  #ABBR: rebase
    rb = rebase

  #abort rebase operation (stopped due to conflicts)
    rba = rebase --abort
  #continue rebase operation after merging
    rbc = rebase --continue

  #reset all of the commit dates to the author dates so your commit logs show up in chronological order instead of the moment of the rebase
  #e.g. 'git rd origin/master' while on a feature branch
    rd = rebase --committer-date-is-author-date

  #interactive rebase; preserve merges (good for updating author info, for example); takes some HEAD as arg
    irbp = rebase -i -p
  #interactive rebase for the given upstream
    irbu = rebase -i @{u}
  #interactive rebase to squash [previous] commits to the head
    irbh = "!f(){ git rebase -i HEAD~$1; };f"
  #interactive rebase to specific commit
    irbc = "!f(){ git rebase -i $1^; }; f"

  #ABBR: difftool (use default configured, i.e. Beyond Compare)
    dt = difftool
  #show unstaged changes
    dtd = difftool --dir-diff
  #use vimdiff in console as a difftool
    dtt = difftool --tool=vimdiff
  #ABBR: mergetool
    mt = mergetool
  #use vimdiff in console as mergetool
    mtt = mergetool --tool=vimdiff

  #EXT (my-git-extras/scripts/git-remote-updates): show updates on remote since the last common ancestor
    rup = remote-updates
  #as above, but with patches
    rupp = remote-updates -p

  #show local commits not yet pushed to the remote (synonmous to outlog?)
  #  unpushed = !LB=$(git rev-parse --abbrev-ref HEAD) && RB=$(git show-remote-branch) && git lf "\"$RB\"".."\"$LB\""

  #show changes to upstream
    statup = !git remote update -p && git diff --stat @{u}

  #show diff from local to upstream (not yet pushed)
    outlog = !git lf @{u}..
  #show diff from upstream to local (not yet merged)
    inlog = !git remote update -p && git lf ..@{u}

  #simulate push
    outgoing = push --dry-run
  #simulate fetch
    incoming = fetch --dry-run

  #ABBR: whatchanged
    wch = whatchanged
  #whatchanged with patches
    wchp = whatchanged -p

  #whatchanged in the remote of this branch
    remch = !RE=$(git show-remote-branch) && git remote update -p && git whatchanged "\"$RE\""
  #whatchanged in the remote of this branch (show patches)
    remchp = !RE=$(git show-remote-branch) && git remote update -p && git whatchanged -p "\"$RE\""
  #remote log
    reml = !RE=$(git show-remote-branch) && git remote update -p && git lf "\"$RE\""
  #remote log with patches
    remlp = !RE=$(git show-remote-branch) && git remote update -p && git lf -p "\"$RE\""

  #ABBR: merge
    mg = merge
  #abort merge
    mga = merge --abort
  #merge master
    mgm = "!f() { git branch | grep 'master\\|main' | tr -d \\* | xargs git merge ; };f"

  #test merge against given branch to see if it would merge without conflicts (nothing is done)
    mergetest = "!f(){ git merge --no-commit --no-ff $1; git merge --abort; echo 'Merge aborted'; };f "

  #merge, require fast-forwardable (or HEAD to be good as-is)
    meff = merge --ff-only --stat
  #pull (fetch + merge) from remote, require fast-forwardable (or HEAD to be good as-is); explicitly no rebasing (merge instead)
    puff = pull --ff --ff-only --no-rebase --stat
    pu =  pull --ff --ff-only --no-rebase --stat

  #pull (fetch + rebase) from remote, require fast-forwardable & rebase local to the HEAD of remote
    purr = pull --ff --ff-only --rebase --stat
  #pull (fetch + rebase) from remote, require fast-forwardable & rebase local to the HEAD of remote, including on a dirty local
    purrd = pull --ff --ff-only --rebase --autostash --stat

  #ABBR: stash; use -m for a comment
    ss = stash

  #stash a single file; use -m for a comment
    ssf = stash push
  #drop the [last item] in stash
    ssdr = stash drop
  #create a new branch out of stash (branchname required, stash number optional - uses last if not defined)
    ssbr = stash branch
  #stash all changes on tracked files, from the top of the work tree
    ssr = stash --keep-index
  #stash all changes, including untracked files
    ssu = stash --include-untracked
  #stash all changes, including untracked and ignored files
    ssa = stash --all
  #stash interactively (since HEAD)
    ssi = stash --patch
  #apply and remove the given (or latest) stash state
    ssp = stash pop
  #list stashes
    ssl = stash list
  #display stash contents
    ssls = stash show -p

  #ABBR: add
    a = add

  #stage all changes
    aa = add -A :/
  #stage selected patches
    ap = add -p
  #stage modifications and new (not deletions)
    amodnew = add --ignore-removal .
  #stage modifications and deletions (not new)
    amoddel = add -u
  #EXT (my-git-extras/scripts/git-add-mods-only): stage modifications only (not new/dels)
    amod = add-mods-only

  #ABBR: revert (creates patches to revert given SHAs or range such as 0766c053..HEAD; does not auto-commit the reversion patches)
    rev = revert --no-commit --no-edit

  #remove staged entries (make them unstaged again; does not revert!)
  #NOTE: this is essentially 'reset --mixed'
    res = reset
    unstage = reset HEAD

  #remove from index all deleted files that were deleted with OS rm, and not with ´git rm´.
    rma = !git ls-files -z --deleted | xargs -0 git rm
  #remove previuosly tracked item from index so that it can be .gitignored (NOTE: COMMIT ANY CHANGES FIRST!)
    untrack = git rm --cached
  #untracks all .gitignored items (NOTE: COMMIT ANY CHANGES FIRST!)
    untrackignored = !git rm -r --cached . && git add .

  #commit with a message
    x = commit -S -m
  #add all and commit with a message (doesn't add new files)
    xa = commit -a -m
  #stage all and commit in one go
    ac = "!f() { git add -A :/; git commit -m \"${*:- }\" ; }; f"
  #create a SAVEPOINT commit
    save = !git add -A :/ && git commit -m 'SAVEPOINT'
  #create a WIP commit
    wip = !git add -u && git commit -m 'WIP'
  #add the currently staged changes to the most recent commit; do not modify the commit message
  #note that the SHA/commit timestamp of the most recent commit are rewritten
    amend = commit --amend -C HEAD
  #fixup HEAD, don't run any hooks
    fixup = commit --no-verify --fixup HEAD
  #add the currently staged changes to a specific commit SHA; 
  #note that all SHAs/commit timestamps are rewritten from the amended commit onwards
    amend-to = "!f() { SHA=`git rev-parse \"$1\"`; git commit --fixup \"$SHA\" && GIT_SEQUENCE_EDITOR=true git rebase --interactive --autosquash \"$SHA^\"; }; f"
  #modify commit message for the most recent commit
    revise = commit --amend -m
  #undo the most recent commit (committed items are returned to stage); keep any changes since then
    xx = reset --soft HEAD^
  #undo the most recent commit and unstage
    xxu = "!f() { git reset --soft HEAD^ ; git reset HEAD ; }; f"
  #undo the most recent commit (committed items are returned to stage); wipe any changes since then
    xxx = reset --hard HEAD^

  #execute git command with fileMode off (e.g. ignore permissions changes)
    n = "!f() { git -c core.fileMode=false $@ ; }; f"

  #ABBR: tag
    t = tag

  #exclude/unexclude files using assume-unchanged
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
  #not in index; show untracked files
    nii = ls-files --others --exclude-standard
  #EXT (my-git-extras/scripts/git-show-ignored): show all ignored, whether assume-unchanged, exclude-standard, or .gitgnore
    si = show-ignored

  #ABBR: show
    sh = show

  #show oneline commit log with graph; committer details
    l = log --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(cyan)[%an]%Creset' --abbrev-commit --date=relative
  #show commit log with full details  
    ll = log --abbrev-commit
  #show commit log with full details + signatures
    lls = log --abbrev-commit --show-signature
  #show commit log with full details + graph
    lll = log --abbrev-commit --graph    
  #show oneline commit log with commit dates
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  #show oneline commit log with graph; committer details; full SHA
    lf = log --graph --pretty=full-log --no-abbrev --date=relative
  #like 'l' but selectable number of output lines as a param
    ln = log --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(cyan)[%an]%Creset' --abbrev-commit --date=relative -n
  #show commit log with full detail
    lna = log --cc --stat
  #show commit log with full detail + signatures
    lnas = log --cc --stat --show-signature
  #show commit log with full diff patches
    lnap = log --patch
  #abbreviated (short) commit list
    lns = log --graph --decorate --pretty=oneline --abbrev-commit
  #list my commits
    listmy = !UN=$(git config user.name) && git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --author="\"$UN\"" 
  #show my commits (number of commits to show as a param)
    showmy = !UN=$(git config user.name) && git show --author="\"$UN\"" -n
  #show files and their statuses in each commit
    whc = log --name-status
  #show the affected filenames in the last commit
    lastc = show --stat --oneline "HEAD^..HEAD"
  #show the affected filenames in the previous commit
    prevc = show --stat --oneline "HEAD^^..HEAD^"
  #show the affected filenames in the given commit
    aff = show --stat --oneline
  #show the last commit with full date information
    lastdt = log --pretty=fuller --decorate --graph -n 1
  #very abbreviated view of commits
    lcl = log --pretty=oneline --abbrev-commit
  #show a simple list of the tags
    lt = tag -l -n1
  #show commits since last command (e.g. git pull)
    new = !sh -c 'git log $1@{1}..$1@{0} HEAD'

  #ABBR: reflog
    ref = reflog --no-abbrev --pretty=full-reflog

  #EXT (my-git-extras/scripts/git-show-commit): display details for a commit
    sc = show-commit
  #show simple log with the names of the affected files
    sca = log --name-only

  #list summary of files with deletions in the log
    dels = log --diff-filter=D --summary
  #list heads in this repo (note: for a remote repo only the heads of the tracked branches are shown)
    heads = for-each-ref --sort=-committerdate refs/heads/

  #display git repository object file
    dump = cat-file -p

  #status in short format (including the branch and tracking info)
    st = status -sb
  #extended verbose status
    #ste = !git remote update -p && git status --long -vv
    ste = status --long -vv
  #show information about files in the index and the working tree
    ls = ls-files

  #ABBR: diff (without params show changes since index, i.e. since stage, or if no stage exist, since HEAD)
    df = diff
  #inline diff
    dfi = diff --word-diff
  #show changes to the HEAD (staged and unstaged)
    dfhd = diff HEAD
  #show changes in HEAD (to the previous commit)
    lastcm = diff "HEAD^" HEAD
  #show diff for staged (cached); show diff between HEAD and stage
    dfstaged = diff --staged
  #list file names in stage
    lstaged = diff --staged --name-only
    staged = diff --staged --name-only
  #show staged change statistics by file
    nstaged = diff --stat
  #show staged change statistics by directory
    dstaged = diff --dirstat

  #show filenames affected by a given commit
    cfiles = show --name-status
  #show HEAD offset
    shead = "!f() { git show HEAD@{$1}; }; f"
  #show changes in a specific commit; NOTE: http://stackoverflow.com/a/25395673/134536; NOTE: can also use 'show'
    cdiff = "!f() { git diff $1^!; }; f"
  #show commit log between two given commits
    logbtwn = "!f() { git log --pretty=format:'* %s' $1..$2; }; f"
  #show changes in a given commit (SHA)
    diffin = log -n1 --format=fuller -p
  #show changes between two given commits (SHAs)
    diffrange = log --format=fuller -p

  #ABBR: verify-commit
    vc = verify-commit

  #find commits for a given file (req: filename)
    ffile = log -- 
  #restore a file from an old commit (req SHA ($1), filename ($2))
    rfile = "!f() { git checkout $1 -- $2 ; }; f"

  #EXT (my-git-extras/scripts/git-wipe-file): wipe a single file
    wipefile = wipe-file
  #reset a single file (requires a filename as a param)
    resetfile = checkout HEAD --
  #wipe current uncommitted (including staged and untracked) changes; deletes previously untracked; leaves a stash behind
    wipeall = "!f() { git stash --all --message \"WIPE SAVEPOINT on `date`\" && git reset --hard HEAD ; }; f" 
  #wipe unstaged tracked changes (does not touch staged, tracked or untracked)
    wipeunstaged = checkout -- .
  #EXT (my-git-extras/scripts/wipe-unstaged): wipe current unstaged (including untracked) changes; deletes untracked!
    wipeallunstaged = wipe-unstaged
  #wipe untracked files
    wipeu = clean -df
  #wipe untracked files, including ignored
    wipeux = clean -dfx

  #show the current git configuration (global -> local); included config files such as *this* are excluded
    allconf = config --list
  #show the global git configuration
    globalconf = config --list --global
  #show the local git configuration
    localconf = config --list --local
  #show currently available git commands
    gcom = help -a

  #ABBR: config
    cnf = config
  #"ConfigShowOrigin"; where does config come from?
    cnfsh = config --list --show-origin
  #list defined git aliases
    lal = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | less
  #list defined git aliases sorted
    lals = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort | less

  #edit the global .gitconfig (not this file since this is included from the global)
    eg = config --global -e

# see https://git-scm.com/docs/git-config or `man git-config` for variable details
[branch]
  autosetupmerge = always
  autosetuprebase = always
[clean]
  requireForce = true
[core]
  legacyheaders = false
  whitespace = -trailing-space
  excludesfile = ~/.gitignore
  editor = nvim
[credential]
  helper = cache --timeout 3600
[format]
  numbered = auto
[diff]
  mnemonicprefix = true
  tool = bc4
[difftool]
  prompt = false
[difftool "bc4"]
  trustexitcode = true
  cmd = /usr/local/bin/bcompare \"$LOCAL\" \"$REMOTE\"
[difftool "vim"]
  trustexitcode = true
  cmd = vimdiff \"$LOCAL\" \"$REMOTE\"
[gitflow "prefix"]
  feature = feature-
  release = release-
  hotfix = hotfix-
  support = support-
  versiontag = v
[merge]
  tool = bc4
[mergetool]
  prompt = false
  keepBackup = false
[mergetool "bc4"]
  trustexitcode = true
  cmd = /usr/local/bin/bcompare \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
[mergetool "vim"]
  trustexitcode = true
  cmd = vimdiff \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
[pager]
  status = false
[pretty]
  full-log = "format:%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr %x1b[0;37m@ %ai%Creset %C(cyan)[%an]%Creset%n"
  full-reflog = "format:%x1b[93;2m%h - %x1b[33m%>>(11)%gd%Creset - %x1b[1;37m%>>(14)%ar% %x1b[0;37m @ %ai%Creset -%x1b[1;31m %gs %x1b[0;31m(%s) %x1b[0;34m- %cn%n"
[push]
  default = simple
[rebase]
  autosquash = true
  missingCommitsCheck = warn
[repack]
  usedeltabaseoffset = true
[status]
  submodulesummary = true
[tag]
  forcesignannotated = false
[url "git@github.com:"]
  insteadOf = "gh:"
  pushinsteadof = "github:"
  pushinsteadof = "git://github.com/"
[url "git://github.com/"]
  insteadof = "github:"
[url "git@gist.github.com:"]
  insteadof = "gst:"
  pushinsteadof = "gist:"
  pushinsteadof = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadof = "gist:"
